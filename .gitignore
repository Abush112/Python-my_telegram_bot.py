from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import openai

# Loglarni sozlash
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Telegram va OpenAI API kalitlari
TOKEN = '8166116671:AAHdAD5-8seR8LnYLAn7dBW9XYdfa1FiD88'
OPENAI_API_KEY = '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'
openai.api_key = OPENAI_API_KEY

# Menyu tugmalarini yaratish uchun yordamchi funksiya
def create_main_menu():
    keyboard = [
        [KeyboardButton("eng_uz"), KeyboardButton("uz_eng")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# /start buyrug'iga javob beruvchi funksiya
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Foydalanuvchi botni ishga tushirdi.")
    await update.message.reply_text(
        "Salom! Men yangi botman. Sizga qanday yordam bera olaman?",
        reply_markup=create_main_menu()
    )

# OpenAI bilan tarjima qilish funksiyasi
async def translate_with_openai(text, target_language):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=f"Translate this text to {target_language}: {text}",
        max_tokens=100
    )
    translation = response.choices[0].text.strip()
    return translation

# Tugma bosilganda javob beruvchi funksiya
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"Foydalanuvchi tugmani bosdi: {text}")

    if text == "eng_uz":
        await update.message.reply_text("Inglizcha matnni kiriting:")
        context.user_data['mode'] = 'eng_uz'
    elif text == "uz_eng":
        await update.message.reply_text("O'zbekcha matnni kiriting:")
        context.user_data['mode'] = 'uz_eng'
    else:
        # Tarjima qilish jarayoni
        mode = context.user_data.get('mode')
        if mode == 'eng_uz':
            translation = await translate_with_openai(text, "Uzbek")
        elif mode == 'uz_eng':
            translation = await translate_with_openai(text, "English")
        else:
            translation = "Noma'lum buyruq."

        await update.message.reply_text(translation)

# /help buyrug'iga javob beruvchi funksiya
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Menga savollaringizni yuboring yoki buyruqlardan foydalaning.")

# Asosiy ishga tushirish funksiyasi
def main():
    application = Application.builder().token(TOKEN).build()

    # Buyruqlarni qo'shish
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # Tugmalarni boshqarish
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button))

    # Botni boshlash
    application.run_polling()
    logger.info("Bot ishga tushirildi.")

if __name__ == '__main__':
    main()
